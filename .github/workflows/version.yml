name: Version
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-versioning
on:
  workflow_call:
permissions: write-all
env:
  commitMsg: ""
  REPO_URL: "https://api.github.com/repos/${{ github.repository }}"
jobs:
  check-tokens:
    runs-on: ubuntu-latest
    outputs:
      appToken: ${{ steps.checkToken.outputs.appToken }}
      userToken: ${{ steps.checkToken.outputs.userToken }}
    steps:
      - id: checkToken
        uses: Zwiqler94/GH-Actions@v0.7.3
        with:
          token: ${{ secrets.USER_ACCESS_TOKEN }}
          appId: ${{ secrets.APP_ID }}
          privateKey: ${{ secrets.APP_PRIVATE_KEY }}
          clientId: ${{ secrets.APP_CLIENT_ID }}
          clientSecret: ${{ secrets.APP_CLIENT_SECRET }}
          userRefreshToken: ${{ secrets.USER_REFRESH_TOKEN }}
  verify-commit:
    if: ${{ github.event.pull_request.merged == true }}
    needs: [check-tokens]
    uses: ./.github/workflows/verify-commit.yml
  version-patch:
    if: ${{ github.event.pull_request.merged == true }}
    needs: [verify-commit, check-tokens]
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        if: ${{ needs.verify-commit.outputs.versionType  == 'patch' }}
        uses: actions/checkout@v4.1.4
        with:
          token: ${{ secrets.APP_ACCESS_TOKEN }}
      - name: Use Node.js 20
        if: ${{ needs.verify-commit.outputs.versionType  == 'patch' }}
        uses: actions/setup-node@v4.0.1
        with:
          node-version: 20
          cache: "npm"
      - name: version
        if: ${{ needs.verify-commit.outputs.versionType  == 'patch' }}
        run: |
          git remote set-url origin https://github-actions[bot]:${{ secrets.APP_ACCESS_TOKEN }}@github.com/${{ github.repository }}.git
          git pull --tags
          git config --local user.name 'github-actions[bot]'
          git config --local user.email 'github-actions[bot]@github.com'
          git config --local push.autoSetupRemote true
          git checkout -b "${{ github.head_ref }}"
          npm ci
          npm version patch
          git push
          git push --tags
      - name: set PULL_URL
        if: ${{ needs.verify-commit.outputs.versionType  == 'patch' }}
        run: echo "PULL_URL="${{ env.REPO_URL }}/pulls"" >> "$GITHUB_ENV"
      - name: check URL
        if: ${{ needs.verify-commit.outputs.versionType  == 'patch' }}
        run: echo "-URL-> ${{ env.PULL_URL }}"
      - name: set PULL REQ JSON
        if: ${{ needs.verify-commit.outputs.versionType  == 'patch' }}
        run: echo "JSON="{\"title\":\"Amazing new feature patch\",\"body\":\"Please pull these awesome changes in!\",\"head\":\"Zwiqler94:"${{ github.head_ref }}"\",\"base\":\"development\"}"" >> "$GITHUB_ENV"
      - name: check JSON
        if: ${{ needs.verify-commit.outputs.versionType  == 'patch' }}
        run: echo "-JSON-> ${{ env.JSON }}"
      - name: get PR Number
        if: ${{ needs.verify-commit.outputs.versionType  == 'patch' }}
        run: echo "PR_NUM=$(curl -L -X POST "${{ env.PULL_URL }}" -H "Accept:application/vnd.github+json" -H "Authorization:Bearer ${{ secrets.APP_ACCESS_TOKEN }}"  -H "X-GitHub-Api-Version:2022-11-28"  -d ${{ toJson(env.JSON) }} | jq -r '.number')" >> "$GITHUB_ENV"
      - name: check PR NUM
        if: ${{ needs.verify-commit.outputs.versionType  == 'patch' }}
        run: echo "-Curl-> ${{ env.PR_NUM }}"
      - name: set APPROVAL_URL
        if: ${{ needs.verify-commit.outputs.versionType  == 'patch' }}
        run: echo "APPROVAL_URL="${{ env.PULL_URL }}/${{ env.PR_NUM }}/reviews"" >> "$GITHUB_ENV"
      - name: request APPROVAL
        if: ${{ needs.verify-commit.outputs.versionType  == 'patch' }}
        run: curl --request POST "${{ env.APPROVAL_URL }}"  -H "content-type:application/json" -H 'Authorization:Bearer ${{ secrets.USER_ACCESS_TOKEN }}' -d '{"event":"APPROVE"}'
      - name: set MERGE_URL
        if: ${{ needs.verify-commit.outputs.versionType  == 'patch' }}
        run: echo "MERGE_URL="${{ env.PULL_URL }}/${{ env.PR_NUM }}/merge"" >> "$GITHUB_ENV"
      - name: request Merge
        if: ${{ needs.verify-commit.outputs.versionType  == 'patch' }}
        run: curl --request PUT ${{ env.MERGE_URL }}  -H "Accept:application/vnd.github+json" -H 'Authorization:Bearer ${{ secrets.APP_ACCESS_TOKEN }}' -d '{"commit_title":"version","commit_message":"Add a new value to the merge_method enum"}'
  version-minor:
    if: ${{ github.event.pull_request.merged == true }}
    needs: [verify-commit, check-tokens]
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        if: ${{ needs.verify-commit.outputs.versionType  == 'minor' }}
        uses: actions/checkout@v4.1.4
        with:
          token: ${{ secrets.APP_ACCESS_TOKEN }}
      - name: Use Node.js 20
        if: ${{ needs.verify-commit.outputs.versionType  == 'minor' }}
        uses: actions/setup-node@v4.0.1
        with:
          node-version: 20
          cache: "npm"
      - name: version
        if: ${{ needs.verify-commit.outputs.versionType  == 'minor' }}
        run: |
          git remote set-url origin https://github-actions[bot]:${{ secrets.APP_ACCESS_TOKEN }}@github.com/${{ github.repository }}.git
          git pull --tags
          git config --local user.name 'github-actions[bot]'
          git config --local user.email 'github-actions[bot]@github.com'
          git config --local push.autoSetupRemote true
          git checkout -b "${{ github.head_ref }}"
          npm ci
          npm version minor
          git push
          git push --tags
      - name: set PULL_URL
        if: ${{ needs.verify-commit.outputs.versionType  == 'minor' }}
        run: echo "PULL_URL="${{ env.REPO_URL }}/pulls"" >> "$GITHUB_ENV"
      - name: check URL
        if: ${{ needs.verify-commit.outputs.versionType  == 'minor' }}
        run: echo "-URL-> ${{ env.PULL_URL }}"
      - name: set PULL REQ JSON
        if: ${{ needs.verify-commit.outputs.versionType  == 'minor' }}
        run: echo "JSON="{\"title\":\"Amazing new feature minor\",\"body\":\"Please pull these awesome changes in!\",\"head\":\"Zwiqler94:"${{ github.head_ref }}"\",\"base\":\"development\"}"" >> "$GITHUB_ENV"
      - name: check JSON
        if: ${{ needs.verify-commit.outputs.versionType  == 'minor' }}
        run: echo "-JSON-> ${{ env.JSON }}"
      - name: get PR Number
        if: ${{ needs.verify-commit.outputs.versionType  == 'minor' }}
        run: echo "PR_NUM=$(curl -L -X POST "${{ env.PULL_URL }}" -H "Accept:application/vnd.github+json" -H "Authorization:Bearer ${{ secrets.APP_ACCESS_TOKEN }}"  -H "X-GitHub-Api-Version:2022-11-28"  -d ${{ toJson(env.JSON) }} | jq -r '.number')" >> "$GITHUB_ENV"
      - name: check PR NUM
        if: ${{ needs.verify-commit.outputs.versionType  == 'minor' }}
        run: echo "-Curl-> ${{ env.PR_NUM }}"
      - name: set APPROVAL_URL
        if: ${{ needs.verify-commit.outputs.versionType  == 'minor' }}
        run: echo "APPROVAL_URL="${{ env.PULL_URL }}/${{ env.PR_NUM }}/reviews"" >> "$GITHUB_ENV"
      - name: request APPROVAL
        if: ${{ needs.verify-commit.outputs.versionType  == 'minor' }}
        run: curl --request POST "${{ env.APPROVAL_URL }}"  -H "content-type:application/json" -H 'Authorization:Bearer ${{ secrets.USER_ACCESS_TOKEN }}' -d '{"event":"APPROVE"}'
      - name: set MERGE_URL
        if: ${{ needs.verify-commit.outputs.versionType  == 'minor' }}
        run: echo "MERGE_URL="${{ env.PULL_URL }}/${{ env.PR_NUM }}/merge"" >> "$GITHUB_ENV"
      - name: request Merge
        if: ${{ needs.verify-commit.outputs.versionType  == 'minor' }}
        run: curl --request PUT ${{ env.MERGE_URL }}  -H "Accept:application/vnd.github+json" -H 'Authorization:Bearer ${{ secrets.APP_ACCESS_TOKEN }}' -d '{"commit_title":"version","commit_message":"Add a new value to the merge_method enum"}'
  version-major:
    if: ${{ github.event.pull_request.merged == true }}
    needs: [verify-commit, check-tokens]
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        if: ${{ needs.verify-commit.outputs.versionType  == 'major' }}
        uses: actions/checkout@v4.1.4
        with:
          token: ${{ secrets.APP_ACCESS_TOKEN }}
      - name: Use Node.js 20
        if: ${{ needs.verify-commit.outputs.versionType  == 'major' }}
        uses: actions/setup-node@v4.0.1
        with:
          node-version: 20
          cache: "npm"
      - name: version
        if: ${{ needs.verify-commit.outputs.versionType  == 'major' }}
        run: |
          git remote set-url origin https://github-actions[bot]:${{ secrets.APP_ACCESS_TOKEN }}@github.com/${{ github.repository }}.git
          git pull --tags
          git config --local user.name 'github-actions[bot]'
          git config --local user.email 'github-actions[bot]@github.com'
          git config --local push.autoSetupRemote true
          git checkout -b "${{ github.head_ref }}"
          npm ci
          npm version major
          git push
          git push --tags
      - name: set PULL_URL
        if: ${{ needs.verify-commit.outputs.versionType  == 'major' }}
        run: echo "PULL_URL="${{ env.REPO_URL }}/pulls"" >> "$GITHUB_ENV"
      - name: check URL
        if: ${{ needs.verify-commit.outputs.versionType  == 'major' }}
        run: echo "-URL-> ${{ env.PULL_URL }}"
      - name: set PULL REQ JSON
        if: ${{ needs.verify-commit.outputs.versionType  == 'major' }}
        run: echo "JSON="{\"title\":\"Amazing new feature major\",\"body\":\"Please pull these awesome changes in!\",\"head\":\"Zwiqler94:"${{ github.head_ref }}"\",\"base\":\"development\"}"" >> "$GITHUB_ENV"
      - name: check JSON
        if: ${{ needs.verify-commit.outputs.versionType  == 'major' }}
        run: echo "-JSON-> ${{ env.JSON }}"
      - name: get PR Number
        if: ${{ needs.verify-commit.outputs.versionType  == 'major' }}
        run: echo "PR_NUM=$(curl -L -X POST "${{ env.PULL_URL }}" -H "Accept:application/vnd.github+json" -H "Authorization:Bearer ${{ secrets.APP_ACCESS_TOKEN }}"  -H "X-GitHub-Api-Version:2022-11-28"  -d ${{ toJson(env.JSON) }} | jq -r '.number')" >> "$GITHUB_ENV"
      - name: check PR NUM
        if: ${{ needs.verify-commit.outputs.versionType  == 'major' }}
        run: echo "-Curl-> ${{ env.PR_NUM }}"
      - name: set APPROVAL_URL
        if: ${{ needs.verify-commit.outputs.versionType  == 'major' }}
        run: echo "APPROVAL_URL="${{ env.PULL_URL }}/${{ env.PR_NUM }}/reviews"" >> "$GITHUB_ENV"
      - name: request APPROVAL
        if: ${{ needs.verify-commit.outputs.versionType  == 'major' }}
        run: curl --request POST "${{ env.APPROVAL_URL }}"  -H "content-type:application/json" -H 'Authorization:Bearer ${{ secrets.USER_ACCESS_TOKEN }}' -d '{"event":"APPROVE"}'
      - name: set MERGE_URL
        if: ${{ needs.verify-commit.outputs.versionType  == 'major' }}
        run: echo "MERGE_URL="${{ env.PULL_URL }}/${{ env.PR_NUM }}/merge"" >> "$GITHUB_ENV"
      - name: request Merge
        if: ${{ needs.verify-commit.outputs.versionType  == 'major' }}
        run: curl --request PUT ${{ env.MERGE_URL }}  -H "Accept:application/vnd.github+json" -H 'Authorization:Bearer ${{ secrets.APP_ACCESS_TOKEN }}' -d '{"commit_title":"version","commit_message":"Add a new value to the merge_method enum"}'
  skip-no-deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.action == 'opened' || github.event.action == 'synchronize'}}
    steps:
      - run: |
          echo "::notice:: skip versioning because we are not deploying"
          exit 0
  skip-already-versioned:
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.merged == true }}
    steps:
      - if: ${{ needs.verify-commit.outputs.versionType  == 'stop' }}
        run: |
            echo "::notice:: skip versioning because been there done that"
            exit 0
  check-version-job:
    runs-on: ubuntu-latest
    needs:
      [
        check-tokens,
        verify-commit,
        version-patch,
        version-minor,
        version-major,
        skip-no-deploy,
        skip-already-versioned,
      ]
    if: ${{ always() }}
    steps:
      - run: |
          if [[ '${{ needs.check-tokens.result }}' == 'failure' && '${{ needs.verify-commit.result }}' == 'failure' && '${{ needs.version-patch.result }}' == 'failure' && '${{ needs.version-minor.result }}' == 'failure' && '${{ needs.version-major.result }}' == 'failure' && '${{ needs.skip-no-deploy.result }}' == 'failure' && '${{ needs.skip-already-versioned.result }}' == 'failure' ]]; then
            echo "Version Failed"
            exit 1
          elif [[ '${{ needs.version-patch.result }}' == 'success' || '${{ needs.version-minor.result }}' == 'success' || '${{ needs.version-major.result }}' == 'success' ]]; then
            echo "Version Succeeded"
            exit 0
          elif [[ '${{ needs.skip-no-deploy.result }}' == 'success' || '${{ needs.skip-already-versioned.result }}' == 'success' ]]; then
            echo "Version Skipped"
            exit 0
          else
            exit 1
          fi
