name: Verify Version Type From Commit
on:
  workflow_call:
    outputs:
      versionType:
        description: "the version increment type (major, minor, or patch)"
        value: ${{ jobs.VERIFY.outputs.versionType }}
      commitMsg:
         description: "the last commit message"
         value: ${{ jobs.GET-COMMIT.outputs.commitMsg }}
permissions: read-all
env:
  GH_TOKEN: "${{ github.token }}"
  prNumber: "${{ github.event.pull_request.number }}"
  commitSHA: "${{ github.event.pull_request.base.sha }}"
  commitURL: "${{ github.event.pull_request.base.repo.commits_url }}"
  # eventInfo: "${{ toJson(github.event.pull_request) }}"
jobs:
  GET-COMMIT:
    outputs:
      commitMsg: ${{ steps.commitResponse.outputs.commitMsg }}
    runs-on: ubuntu-latest
    env:
      replaceMe: "{/sha}"
      owner: "Zwiqler94"
      repo: "jz-portfolio"
    steps:
      - run: echo "sha=$(gh api repos/${{ env.owner }}/${{env.repo}}/pulls/${{ env.prNumber }} | jq -r '.merge_commit_sha')" >> $GITHUB_ENV
      - run: echo "commitURLWithSHA=${commitURL/$replaceMe/"/$sha"}" >> $GITHUB_ENV
      - run: echo "$commitURLWithSHA"
      - id: commitResponse
        run: |
          EOF="$(dd if=/dev/urandom bs=15 count=1 status=none | base64)"
          echo "commitMsg<<$EOF" >> "$GITHUB_OUTPUT"
          curl $commitURLWithSHA | jq -r '.commit.message' >> "$GITHUB_OUTPUT"
          echo "$EOF" >> "$GITHUB_OUTPUT"
  VERIFY:
    runs-on: ubuntu-latest
    outputs:
      versionType: ${{ steps.verifyCommit.outputs.versionType }}
    needs: GET-COMMIT
    env:
      commitMsg: ${{ needs.GET-COMMIT.outputs.commitMsg }}
    steps:
      - name: check commit
        id: verifyCommit
        run: |
          headline="$(printf '%s' "$commitMsg" | head -n1 | tr -d '\r')"
          major_regex='^[a-z]+([a-z0-9-]*)?(\([^)]+\))?!:.*'
          feat_regex='^feat(\([^)]+\))?:.*'
          patch_regex='^(fix(\([^)]+\))?|perf(\([^)]+\))?|revert(\([^)]+\))?|docs(\([^)]+\))?|style(\([^)]+\))?|chore(\([^)]+\))?|refactor(\([^)]+\))?|test(\([^)]+\))?|build(\([^)]+\))?|ci(\([^)]+\))?):.*'

          if [[ $headline =~ ^chore\(release\):.* ]]; then
              echo "versionType=stop" >> "$GITHUB_OUTPUT"
              echo "already versioned"
              exit 0
          elif [[ $commitMsg == *"BREAKING CHANGE:"* || $headline =~ $major_regex ]]; then
              echo "versionType=major" >> "$GITHUB_OUTPUT"
              echo "versionType=major"
              exit 0
          elif [[ $headline =~ $feat_regex ]]; then
              echo "versionType=minor" >> "$GITHUB_OUTPUT"
              echo "versionType=minor"
              exit 0
          elif [[ $headline =~ $patch_regex ]]; then
              echo "versionType=patch" >> "$GITHUB_OUTPUT"
              echo "versionType=patch"
              exit 0
          else
              echo "Can't determine version from commit!!!"
              exit 1
          fi
